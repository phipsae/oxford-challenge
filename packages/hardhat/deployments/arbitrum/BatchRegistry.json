{
  "address": "0x7d62c48EcC2f1B7639CDd8c10F11AffA653c6E0e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "batchName",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BatchNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInAllowList",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "first",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "checkInContract",
          "type": "address"
        }
      ],
      "name": "CheckedIn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "checkIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_allowList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_batchName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_checkedInAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_checkedInCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_isOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleBatchOpenStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "builders",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "statuses",
          "type": "bool[]"
        }
      ],
      "name": "updateAllowList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x65948409f2d104eb01cdf6c066206edadf7e9c087ebbc6688e0a15169bf51938",
  "receipt": {
    "to": null,
    "from": "0x059E31Ea8A88b62FE1603CCE134eF7c1cC557395",
    "contractAddress": "0x7d62c48EcC2f1B7639CDd8c10F11AffA653c6E0e",
    "transactionIndex": 3,
    "gasUsed": "669968",
    "logsBloom": "0x00000000000000000000000000000000000000000000000008800000000400000000000000000000000000000000000000008000000000000000000000000000000000000001000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x85410c64ad31db5f5c47fa5e582685f6e4609c31f371bc9b53ce6674c0ead7c0",
    "transactionHash": "0x65948409f2d104eb01cdf6c066206edadf7e9c087ebbc6688e0a15169bf51938",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 329860852,
        "transactionHash": "0x65948409f2d104eb01cdf6c066206edadf7e9c087ebbc6688e0a15169bf51938",
        "address": "0x7d62c48EcC2f1B7639CDd8c10F11AffA653c6E0e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000059e31ea8a88b62fe1603cce134ef7c1cc557395"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x85410c64ad31db5f5c47fa5e582685f6e4609c31f371bc9b53ce6674c0ead7c0"
      }
    ],
    "blockNumber": 329860852,
    "cumulativeGasUsed": "790338",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x059E31Ea8A88b62FE1603CCE134eF7c1cC557395",
    "Oxford University"
  ],
  "numDeployments": 3,
  "solcInputHash": "a352db0d01856ab5f5c0384552b5e6ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"batchName\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BatchNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInAllowList\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"first\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"checkInContract\",\"type\":\"address\"}],\"name\":\"CheckedIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_allowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_batchName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_checkedInAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_checkedInCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleBatchOpenStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"builders\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"updateAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BatchRegistry.sol\":\"BatchRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/BatchRegistry.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BatchRegistry is Ownable {\\n    uint256 constant CHECK_IN_REWARD = 0.015 ether;\\n\\n    string public s_batchName;\\n    mapping(address => bool) public s_allowList;\\n    mapping(address => address) public s_checkedInAddresses;\\n    bool public s_isOpen = true;\\n    uint256 public s_checkedInCounter;\\n\\n    event CheckedIn(bool first, address builder, address checkInContract);\\n\\n    // Errors\\n    error BatchNotOpen();\\n    error NotAContract();\\n    error NotInAllowList();\\n\\n    modifier batchIsOpen() {\\n        if (!s_isOpen) revert BatchNotOpen();\\n        _;\\n    }\\n\\n    modifier senderIsContract() {\\n        if (tx.origin == msg.sender) revert NotAContract();\\n        _;\\n    }\\n\\n    constructor(address initialOwner, string memory batchName) Ownable(initialOwner) {\\n        s_batchName = batchName;\\n    }\\n\\n    function updateAllowList(address[] calldata builders, bool[] calldata statuses) public onlyOwner {\\n        require(builders.length == statuses.length, \\\"Builders and statuses length mismatch\\\");\\n\\n        for (uint256 i = 0; i < builders.length; i++) {\\n            s_allowList[builders[i]] = statuses[i];\\n        }\\n    }\\n\\n    function toggleBatchOpenStatus() public onlyOwner {\\n        s_isOpen = !s_isOpen;\\n    }\\n\\n    function checkIn() public senderIsContract batchIsOpen {\\n        if (!s_allowList[tx.origin]) revert NotInAllowList();\\n\\n        bool wasFirstTime;\\n        if (s_checkedInAddresses[tx.origin] == address(0)) {\\n            s_checkedInCounter++;\\n            wasFirstTime = true;\\n            (bool success,) = tx.origin.call{value: CHECK_IN_REWARD}(\\\"\\\");\\n            require(success, \\\"Failed to send check in reward\\\");\\n        }\\n\\n        s_checkedInAddresses[tx.origin] = msg.sender;\\n        emit CheckedIn(wasFirstTime, tx.origin, msg.sender);\\n    }\\n\\n    // Withdraw function for admins in case some builders don't end up checking in\\n    function withdraw() public onlyOwner {\\n        (bool success,) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Failed to withdraw\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x50c9692df31bc99c8399a06e79e5725e580bd2af5dbea6d5e0da06ff2ac84caf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff191660011790553480156200001e57600080fd5b5060405162000ca138038062000ca18339810160408190526200004191620000fa565b816001600160a01b0381166200007157604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200007c8162000094565b5060016200008b82826200027f565b5050506200034b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200010e57600080fd5b82516001600160a01b03811681146200012657600080fd5b602084810151919350906001600160401b03808211156200014657600080fd5b818601915086601f8301126200015b57600080fd5b815181811115620001705762000170620000e4565b604051601f8201601f19908116603f011681019083821181831017156200019b576200019b620000e4565b816040528281528986848701011115620001b457600080fd5b600093505b82841015620001d85784840186015181850187015292850192620001b9565b60008684830101528096505050505050509250929050565b600181811c908216806200020557607f821691505b6020821081036200022657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027a57600081815260208120601f850160051c81016020861015620002555750805b601f850160051c820191505b81811015620002765782815560010162000261565b5050505b505050565b81516001600160401b038111156200029b576200029b620000e4565b620002b381620002ac8454620001f0565b846200022c565b602080601f831160018114620002eb5760008415620002d25750858301515b600019600386901b1c1916600185901b17855562000276565b600085815260208120601f198616915b828110156200031c57888601518255948401946001909101908401620002fb565b50858210156200033b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610946806200035b6000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b1461015c5780639da085cf1461018e578063a653dcf1146101ce578063b3b09303146101ee578063cae227a814610224578063f2fde38b1461023e57600080fd5b80630e42d879146100b7578063183ff085146100ce5780633ccfd60b146100e35780636ed050ce146100f8578063715018a6146101235780638429a7e81461013857600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100cc61025e565b005b3480156100da57600080fd5b506100cc61027a565b3480156100ef57600080fd5b506100cc610441565b34801561010457600080fd5b5061010d6104e4565b60405161011a9190610741565b60405180910390f35b34801561012f57600080fd5b506100cc610572565b34801561014457600080fd5b5061014e60055481565b60405190815260200161011a565b34801561016857600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561019a57600080fd5b506101be6101a936600461078f565b60026020526000908152604090205460ff1681565b604051901515815260200161011a565b3480156101da57600080fd5b506100cc6101e936600461080b565b610586565b3480156101fa57600080fd5b5061017661020936600461078f565b6003602052600090815260409020546001600160a01b031681565b34801561023057600080fd5b506004546101be9060ff1681565b34801561024a57600080fd5b506100cc61025936600461078f565b610689565b6102666106c4565b6004805460ff19811660ff90911615179055565b33320361029a576040516309ee12d560e01b815260040160405180910390fd5b60045460ff166102bd5760405163f84b8daf60e01b815260040160405180910390fd5b3260009081526002602052604090205460ff166102ed5760405163e0e6520960e01b815260040160405180910390fd5b326000908152600360205260408120546001600160a01b03166103c9576005805490600061031a83610877565b909155505060405160019150600090329066354a6ba7a18000908381818185875af1925050503d806000811461036c576040519150601f19603f3d011682016040523d82523d6000602084013e610371565b606091505b50509050806103c75760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f2073656e6420636865636b20696e20726577617264000060448201526064015b60405180910390fd5b505b326000818152600360205260409081902080546001600160a01b0319163390811790915590517f95c4c3e559833f0140f5b9d4871e3126aa72c84599c139cd7778d4233d69275d926104369285151583526001600160a01b03918216602084015216604082015260600190565b60405180910390a150565b6104496106c4565b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610496576040519150601f19603f3d011682016040523d82523d6000602084013e61049b565b606091505b50509050806104e15760405162461bcd60e51b81526020600482015260126024820152714661696c656420746f20776974686472617760701b60448201526064016103be565b50565b600180546104f19061089e565b80601f016020809104026020016040519081016040528092919081815260200182805461051d9061089e565b801561056a5780601f1061053f5761010080835404028352916020019161056a565b820191906000526020600020905b81548152906001019060200180831161054d57829003601f168201915b505050505081565b61057a6106c4565b61058460006106f1565b565b61058e6106c4565b8281146105eb5760405162461bcd60e51b815260206004820152602560248201527f4275696c6465727320616e64207374617475736573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016103be565b60005b8381101561068257828282818110610608576106086108d8565b905060200201602081019061061d91906108ee565b60026000878785818110610633576106336108d8565b9050602002016020810190610648919061078f565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061067a81610877565b9150506105ee565b5050505050565b6106916106c4565b6001600160a01b0381166106bb57604051631e4fbdf760e01b8152600060048201526024016103be565b6104e1816106f1565b6000546001600160a01b031633146105845760405163118cdaa760e01b81523360048201526024016103be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208083528351808285015260005b8181101561076e57858101830151858201604001528201610752565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156107a157600080fd5b81356001600160a01b03811681146107b857600080fd5b9392505050565b60008083601f8401126107d157600080fd5b50813567ffffffffffffffff8111156107e957600080fd5b6020830191508360208260051b850101111561080457600080fd5b9250929050565b6000806000806040858703121561082157600080fd5b843567ffffffffffffffff8082111561083957600080fd5b610845888389016107bf565b9096509450602087013591508082111561085e57600080fd5b5061086b878288016107bf565b95989497509550505050565b60006001820161089757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806108b257607f821691505b6020821081036108d257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561090057600080fd5b813580151581146107b857600080fdfea26469706673582212209f84f89ef0b277d66dc029d53c0dc7a1c12fc3cde9a98d34d26e0d094d87cd8f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b1461015c5780639da085cf1461018e578063a653dcf1146101ce578063b3b09303146101ee578063cae227a814610224578063f2fde38b1461023e57600080fd5b80630e42d879146100b7578063183ff085146100ce5780633ccfd60b146100e35780636ed050ce146100f8578063715018a6146101235780638429a7e81461013857600080fd5b366100b257005b600080fd5b3480156100c357600080fd5b506100cc61025e565b005b3480156100da57600080fd5b506100cc61027a565b3480156100ef57600080fd5b506100cc610441565b34801561010457600080fd5b5061010d6104e4565b60405161011a9190610741565b60405180910390f35b34801561012f57600080fd5b506100cc610572565b34801561014457600080fd5b5061014e60055481565b60405190815260200161011a565b34801561016857600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161011a565b34801561019a57600080fd5b506101be6101a936600461078f565b60026020526000908152604090205460ff1681565b604051901515815260200161011a565b3480156101da57600080fd5b506100cc6101e936600461080b565b610586565b3480156101fa57600080fd5b5061017661020936600461078f565b6003602052600090815260409020546001600160a01b031681565b34801561023057600080fd5b506004546101be9060ff1681565b34801561024a57600080fd5b506100cc61025936600461078f565b610689565b6102666106c4565b6004805460ff19811660ff90911615179055565b33320361029a576040516309ee12d560e01b815260040160405180910390fd5b60045460ff166102bd5760405163f84b8daf60e01b815260040160405180910390fd5b3260009081526002602052604090205460ff166102ed5760405163e0e6520960e01b815260040160405180910390fd5b326000908152600360205260408120546001600160a01b03166103c9576005805490600061031a83610877565b909155505060405160019150600090329066354a6ba7a18000908381818185875af1925050503d806000811461036c576040519150601f19603f3d011682016040523d82523d6000602084013e610371565b606091505b50509050806103c75760405162461bcd60e51b815260206004820152601e60248201527f4661696c656420746f2073656e6420636865636b20696e20726577617264000060448201526064015b60405180910390fd5b505b326000818152600360205260409081902080546001600160a01b0319163390811790915590517f95c4c3e559833f0140f5b9d4871e3126aa72c84599c139cd7778d4233d69275d926104369285151583526001600160a01b03918216602084015216604082015260600190565b60405180910390a150565b6104496106c4565b600080546040516001600160a01b039091169047908381818185875af1925050503d8060008114610496576040519150601f19603f3d011682016040523d82523d6000602084013e61049b565b606091505b50509050806104e15760405162461bcd60e51b81526020600482015260126024820152714661696c656420746f20776974686472617760701b60448201526064016103be565b50565b600180546104f19061089e565b80601f016020809104026020016040519081016040528092919081815260200182805461051d9061089e565b801561056a5780601f1061053f5761010080835404028352916020019161056a565b820191906000526020600020905b81548152906001019060200180831161054d57829003601f168201915b505050505081565b61057a6106c4565b61058460006106f1565b565b61058e6106c4565b8281146105eb5760405162461bcd60e51b815260206004820152602560248201527f4275696c6465727320616e64207374617475736573206c656e677468206d69736044820152640dac2e8c6d60db1b60648201526084016103be565b60005b8381101561068257828282818110610608576106086108d8565b905060200201602081019061061d91906108ee565b60026000878785818110610633576106336108d8565b9050602002016020810190610648919061078f565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061067a81610877565b9150506105ee565b5050505050565b6106916106c4565b6001600160a01b0381166106bb57604051631e4fbdf760e01b8152600060048201526024016103be565b6104e1816106f1565b6000546001600160a01b031633146105845760405163118cdaa760e01b81523360048201526024016103be565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208083528351808285015260005b8181101561076e57858101830151858201604001528201610752565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156107a157600080fd5b81356001600160a01b03811681146107b857600080fd5b9392505050565b60008083601f8401126107d157600080fd5b50813567ffffffffffffffff8111156107e957600080fd5b6020830191508360208260051b850101111561080457600080fd5b9250929050565b6000806000806040858703121561082157600080fd5b843567ffffffffffffffff8082111561083957600080fd5b610845888389016107bf565b9096509450602087013591508082111561085e57600080fd5b5061086b878288016107bf565b95989497509550505050565b60006001820161089757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806108b257607f821691505b6020821081036108d257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561090057600080fd5b813580151581146107b857600080fdfea26469706673582212209f84f89ef0b277d66dc029d53c0dc7a1c12fc3cde9a98d34d26e0d094d87cd8f64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/BatchRegistry.sol:BatchRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 187,
        "contract": "contracts/BatchRegistry.sol:BatchRegistry",
        "label": "s_batchName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/BatchRegistry.sol:BatchRegistry",
        "label": "s_allowList",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 195,
        "contract": "contracts/BatchRegistry.sol:BatchRegistry",
        "label": "s_checkedInAddresses",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 198,
        "contract": "contracts/BatchRegistry.sol:BatchRegistry",
        "label": "s_isOpen",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 200,
        "contract": "contracts/BatchRegistry.sol:BatchRegistry",
        "label": "s_checkedInCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}